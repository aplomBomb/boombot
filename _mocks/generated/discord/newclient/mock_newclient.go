// Code generated by MockGen. DO NOT EDIT.
// Source: discord/types.go

// Package mock_newclient is a generated GoMock package.
package mock_newclient

import (
	context "context"
	disgord "github.com/andersfylling/disgord"
	snowflake "github.com/andersfylling/snowflake/v4"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDisgordMsgAPI is a mock of DisgordMsgAPI interface
type MockDisgordMsgAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDisgordMsgAPIMockRecorder
}

// MockDisgordMsgAPIMockRecorder is the mock recorder for MockDisgordMsgAPI
type MockDisgordMsgAPIMockRecorder struct {
	mock *MockDisgordMsgAPI
}

// NewMockDisgordMsgAPI creates a new mock instance
func NewMockDisgordMsgAPI(ctrl *gomock.Controller) *MockDisgordMsgAPI {
	mock := &MockDisgordMsgAPI{ctrl: ctrl}
	mock.recorder = &MockDisgordMsgAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisgordMsgAPI) EXPECT() *MockDisgordMsgAPIMockRecorder {
	return m.recorder
}

// SendMsg mocks base method
func (m *MockDisgordMsgAPI) SendMsg(ctx context.Context, channelID snowflake.Snowflake, data ...interface{}) (*disgord.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channelID}
	for _, a := range data {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMsg", varargs...)
	ret0, _ := ret[0].(*disgord.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDisgordMsgAPIMockRecorder) SendMsg(ctx, channelID interface{}, data ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channelID}, data...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDisgordMsgAPI)(nil).SendMsg), varargs...)
}

// MockDisgordClientAPI is a mock of DisgordClientAPI interface
type MockDisgordClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDisgordClientAPIMockRecorder
}

// MockDisgordClientAPIMockRecorder is the mock recorder for MockDisgordClientAPI
type MockDisgordClientAPIMockRecorder struct {
	mock *MockDisgordClientAPI
}

// NewMockDisgordClientAPI creates a new mock instance
func NewMockDisgordClientAPI(ctrl *gomock.Controller) *MockDisgordClientAPI {
	mock := &MockDisgordClientAPI{ctrl: ctrl}
	mock.recorder = &MockDisgordClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisgordClientAPI) EXPECT() *MockDisgordClientAPIMockRecorder {
	return m.recorder
}

// NewClient mocks base method
func (m *MockDisgordClientAPI) NewClient(conf disgord.Config) (*disgord.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", conf)
	ret0, _ := ret[0].(*disgord.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient
func (mr *MockDisgordClientAPIMockRecorder) NewClient(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockDisgordClientAPI)(nil).NewClient), conf)
}
