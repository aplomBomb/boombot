// Code generated by MockGen. DO NOT EDIT.
// Source: discord/types.go

// Package mock_createmessage is a generated GoMock package.
package mock_createmessage

import (
	context "context"
	disgord "github.com/andersfylling/disgord"
	snowflake "github.com/andersfylling/snowflake/v4"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDisgordClientAPI is a mock of DisgordClientAPI interface.
type MockDisgordClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDisgordClientAPIMockRecorder
}

// MockDisgordClientAPIMockRecorder is the mock recorder for MockDisgordClientAPI.
type MockDisgordClientAPIMockRecorder struct {
	mock *MockDisgordClientAPI
}

// NewMockDisgordClientAPI creates a new mock instance.
func NewMockDisgordClientAPI(ctrl *gomock.Controller) *MockDisgordClientAPI {
	mock := &MockDisgordClientAPI{ctrl: ctrl}
	mock.recorder = &MockDisgordClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisgordClientAPI) EXPECT() *MockDisgordClientAPIMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockDisgordClientAPI) CreateMessage(ctx context.Context, channelID snowflake.Snowflake, params *disgord.CreateMessageParams, flags ...disgord.Flag) (*disgord.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channelID, params}
	for _, a := range flags {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMessage", varargs...)
	ret0, _ := ret[0].(*disgord.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockDisgordClientAPIMockRecorder) CreateMessage(ctx, channelID, params interface{}, flags ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channelID, params}, flags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockDisgordClientAPI)(nil).CreateMessage), varargs...)
}
