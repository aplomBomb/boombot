// Code generated by MockGen. DO NOT EDIT.
// Source: discord/types.go

// Package mock_sendmsg is a generated GoMock package.
package mock_sendmsg

import (
	context "context"
	disgord "github.com/andersfylling/disgord"
	snowflake "github.com/andersfylling/snowflake/v4"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSendMsgAPI is a mock of SendMsgAPI interface
type MockSendMsgAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSendMsgAPIMockRecorder
}

// MockSendMsgAPIMockRecorder is the mock recorder for MockSendMsgAPI
type MockSendMsgAPIMockRecorder struct {
	mock *MockSendMsgAPI
}

// NewMockSendMsgAPI creates a new mock instance
func NewMockSendMsgAPI(ctrl *gomock.Controller) *MockSendMsgAPI {
	mock := &MockSendMsgAPI{ctrl: ctrl}
	mock.recorder = &MockSendMsgAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSendMsgAPI) EXPECT() *MockSendMsgAPIMockRecorder {
	return m.recorder
}

// SendMsg mocks base method
func (m *MockSendMsgAPI) SendMsg(ctx context.Context, channelID snowflake.Snowflake, data ...interface{}) (*disgord.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channelID}
	for _, a := range data {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMsg", varargs...)
	ret0, _ := ret[0].(*disgord.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSendMsgAPIMockRecorder) SendMsg(ctx, channelID interface{}, data ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channelID}, data...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSendMsgAPI)(nil).SendMsg), varargs...)
}

// MockNewMessageByStringAPI is a mock of NewMessageByStringAPI interface
type MockNewMessageByStringAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNewMessageByStringAPIMockRecorder
}

// MockNewMessageByStringAPIMockRecorder is the mock recorder for MockNewMessageByStringAPI
type MockNewMessageByStringAPIMockRecorder struct {
	mock *MockNewMessageByStringAPI
}

// NewMockNewMessageByStringAPI creates a new mock instance
func NewMockNewMessageByStringAPI(ctrl *gomock.Controller) *MockNewMessageByStringAPI {
	mock := &MockNewMessageByStringAPI{ctrl: ctrl}
	mock.recorder = &MockNewMessageByStringAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNewMessageByStringAPI) EXPECT() *MockNewMessageByStringAPIMockRecorder {
	return m.recorder
}

// NewMessageByString mocks base method
func (m *MockNewMessageByStringAPI) NewMessageByString(content string) *disgord.CreateMessageParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessageByString", content)
	ret0, _ := ret[0].(*disgord.CreateMessageParams)
	return ret0
}

// NewMessageByString indicates an expected call of NewMessageByString
func (mr *MockNewMessageByStringAPIMockRecorder) NewMessageByString(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageByString", reflect.TypeOf((*MockNewMessageByStringAPI)(nil).NewMessageByString), content)
}

// MockDisgordClientAPI is a mock of DisgordClientAPI interface
type MockDisgordClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDisgordClientAPIMockRecorder
}

// MockDisgordClientAPIMockRecorder is the mock recorder for MockDisgordClientAPI
type MockDisgordClientAPIMockRecorder struct {
	mock *MockDisgordClientAPI
}

// NewMockDisgordClientAPI creates a new mock instance
func NewMockDisgordClientAPI(ctrl *gomock.Controller) *MockDisgordClientAPI {
	mock := &MockDisgordClientAPI{ctrl: ctrl}
	mock.recorder = &MockDisgordClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisgordClientAPI) EXPECT() *MockDisgordClientAPIMockRecorder {
	return m.recorder
}

// NewClient mocks base method
func (m *MockDisgordClientAPI) NewClient(conf disgord.Config) (*disgord.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", conf)
	ret0, _ := ret[0].(*disgord.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient
func (mr *MockDisgordClientAPIMockRecorder) NewClient(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockDisgordClientAPI)(nil).NewClient), conf)
}
