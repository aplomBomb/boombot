// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aplombomb/boombot/discord/ifaces (interfaces: DisgordUserAPI)

// Package mock_disgorduser is a generated GoMock package.
package mock_disgorduser

import (
	context "context"
	disgord "github.com/andersfylling/disgord"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDisgordUserAPI is a mock of DisgordUserAPI interface
type MockDisgordUserAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDisgordUserAPIMockRecorder
}

// MockDisgordUserAPIMockRecorder is the mock recorder for MockDisgordUserAPI
type MockDisgordUserAPIMockRecorder struct {
	mock *MockDisgordUserAPI
}

// NewMockDisgordUserAPI creates a new mock instance
func NewMockDisgordUserAPI(ctrl *gomock.Controller) *MockDisgordUserAPI {
	mock := &MockDisgordUserAPI{ctrl: ctrl}
	mock.recorder = &MockDisgordUserAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDisgordUserAPI) EXPECT() *MockDisgordUserAPIMockRecorder {
	return m.recorder
}

// SendMsg mocks base method
func (m *MockDisgordUserAPI) SendMsg(arg0 context.Context, arg1 disgord.Session, arg2 *disgord.Message) (*disgord.Channel, *disgord.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0, arg1, arg2)
	ret0, _ := ret[0].(*disgord.Channel)
	ret1, _ := ret[1].(*disgord.Message)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDisgordUserAPIMockRecorder) SendMsg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDisgordUserAPI)(nil).SendMsg), arg0, arg1, arg2)
}
